<?xml version="1.0" encoding="UTF-8"?>
<mutations partial="true">
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>&lt;init&gt;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>8</index></indexes><blocks><block>1</block></blocks><killingTest>ExpressionTreeTest.nullInput(ExpressionTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>&lt;init&gt;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>12</index></indexes><blocks><block>4</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><indexes><index>6</index></indexes><blocks><block>1</block></blocks><killingTest>ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)</killingTest><description>replaced double return with 0.0d for expression/ExpressionTree::evaluate</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='11'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>fmt</mutatedMethod><methodDescription>(D)Ljava/lang/String;</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>5</index></indexes><blocks><block>1</block></blocks><killingTest/><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='11'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>fmt</mutatedMethod><methodDescription>(D)Ljava/lang/String;</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>8</index></indexes><blocks><block>3</block></blocks><killingTest/><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>fmt</mutatedMethod><methodDescription>(D)Ljava/lang/String;</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>22</index></indexes><blocks><block>7</block></blocks><killingTest>ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>fmt</mutatedMethod><methodDescription>(D)Ljava/lang/String;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>14</index></indexes><blocks><block>5</block></blocks><killingTest/><description>replaced return value with &quot;&quot; for expression/ExpressionTree::fmt</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>fmt</mutatedMethod><methodDescription>(D)Ljava/lang/String;</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>34</index></indexes><blocks><block>10</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>replaced return value with &quot;&quot; for expression/ExpressionTree::fmt</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>fmt</mutatedMethod><methodDescription>(D)Ljava/lang/String;</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>40</index></indexes><blocks><block>12</block></blocks><killingTest>ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)</killingTest><description>replaced return value with &quot;&quot; for expression/ExpressionTree::fmt</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>infix</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>6</index></indexes><blocks><block>1</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>replaced return value with &quot;&quot; for expression/ExpressionTree::infix</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>isOperator</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>6</index></indexes><blocks><block>1</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>isOperator</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>10</index></indexes><blocks><block>3</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>isOperator</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>14</index></indexes><blocks><block>5</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>isOperator</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>18</index></indexes><blocks><block>7</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>isOperator</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><indexes><index>28</index></indexes><blocks><block>10</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>replaced boolean return with true for expression/ExpressionTree::isOperator</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>parsePostfix</mutatedMethod><methodDescription>(Ljava/lang/String;)Lexpression/ExpressionTree$Node;</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><indexes><index>41</index></indexes><blocks><block>7</block></blocks><killingTest>ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>parsePostfix</mutatedMethod><methodDescription>(Ljava/lang/String;)Lexpression/ExpressionTree$Node;</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>35</index></indexes><blocks><block>5</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>parsePostfix</mutatedMethod><methodDescription>(Ljava/lang/String;)Lexpression/ExpressionTree$Node;</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>41</index></indexes><blocks><block>7</block></blocks><killingTest>ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>parsePostfix</mutatedMethod><methodDescription>(Ljava/lang/String;)Lexpression/ExpressionTree$Node;</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>112</index></indexes><blocks><block>23</block></blocks><killingTest>ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>parsePostfix</mutatedMethod><methodDescription>(Ljava/lang/String;)Lexpression/ExpressionTree$Node;</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>119</index></indexes><blocks><block>25</block></blocks><killingTest>ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>parsePostfix</mutatedMethod><methodDescription>(Ljava/lang/String;)Lexpression/ExpressionTree$Node;</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><indexes><index>72</index></indexes><blocks><block>13</block></blocks><killingTest>ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)</killingTest><description>removed call to java/util/Deque::push</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>parsePostfix</mutatedMethod><methodDescription>(Ljava/lang/String;)Lexpression/ExpressionTree$Node;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><indexes><index>85</index></indexes><blocks><block>17</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>removed call to java/util/Deque::push</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>parsePostfix</mutatedMethod><methodDescription>(Ljava/lang/String;)Lexpression/ExpressionTree$Node;</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><indexes><index>138</index></indexes><blocks><block>31</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>replaced return value with null for expression/ExpressionTree::parsePostfix</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>schemeExpression</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>6</index></indexes><blocks><block>1</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>replaced return value with &quot;&quot; for expression/ExpressionTree::schemeExpression</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree</mutatedClass><mutatedMethod>textTree</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>8</index></indexes><blocks><block>1</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>replaced return value with &quot;&quot; for expression/ExpressionTree::textTree</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>&lt;init&gt;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>8</index></indexes><blocks><block>1</block></blocks><killingTest>IntervalTreeTest.nullTest(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>&lt;init&gt;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>12</index></indexes><blocks><block>4</block></blocks><killingTest>IntervalTreeTest.testEmptyStringVariations(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>()Lintervals/Interval;</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><indexes><index>6</index></indexes><blocks><block>1</block></blocks><killingTest>IntervalTreeTest.testSingleInterval(IntervalTreeTest)</killingTest><description>replaced return value with null for intervals/IntervalTree::evaluate</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>isOperator</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>6</index></indexes><blocks><block>1</block></blocks><killingTest>IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>isOperator</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>10</index></indexes><blocks><block>3</block></blocks><killingTest>IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>isOperator</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><indexes><index>20</index></indexes><blocks><block>6</block></blocks><killingTest>IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)</killingTest><description>replaced boolean return with true for intervals/IntervalTree::isOperator</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>parseInterval</mutatedMethod><methodDescription>(Ljava/lang/String;)Lintervals/Interval;</methodDescription><lineNumber>223</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><indexes><index>27</index></indexes><blocks><block>4</block></blocks><killingTest>IntervalTreeTest.testSingleInterval(IntervalTreeTest)</killingTest><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>parseInterval</mutatedMethod><methodDescription>(Ljava/lang/String;)Lintervals/Interval;</methodDescription><lineNumber>229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><indexes><index>53</index></indexes><blocks><block>10</block></blocks><killingTest>IntervalTreeTest.emptyStart(IntervalTreeTest)</killingTest><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>parseInterval</mutatedMethod><methodDescription>(Ljava/lang/String;)Lintervals/Interval;</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>11</index></indexes><blocks><block>1</block></blocks><killingTest>IntervalTreeTest.missingComma(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>parseInterval</mutatedMethod><methodDescription>(Ljava/lang/String;)Lintervals/Interval;</methodDescription><lineNumber>223</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>30</index></indexes><blocks><block>5</block></blocks><killingTest>IntervalTreeTest.testSingleInterval(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>parseInterval</mutatedMethod><methodDescription>(Ljava/lang/String;)Lintervals/Interval;</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>61</index></indexes><blocks><block>13</block></blocks><killingTest>IntervalTreeTest.testSingleInterval(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>parseInterval</mutatedMethod><methodDescription>(Ljava/lang/String;)Lintervals/Interval;</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>64</index></indexes><blocks><block>15</block></blocks><killingTest>IntervalTreeTest.testSingleInterval(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>parseInterval</mutatedMethod><methodDescription>(Ljava/lang/String;)Lintervals/Interval;</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><indexes><index>93</index></indexes><blocks><block>21</block></blocks><killingTest>IntervalTreeTest.testSingleInterval(IntervalTreeTest)</killingTest><description>replaced return value with null for intervals/IntervalTree::parseInterval</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>parsePostfix</mutatedMethod><methodDescription>(Ljava/lang/String;)Lintervals/IntervalTree$Node;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><indexes><index>42</index></indexes><blocks><block>7</block></blocks><killingTest>IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>parsePostfix</mutatedMethod><methodDescription>(Ljava/lang/String;)Lintervals/IntervalTree$Node;</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>36</index></indexes><blocks><block>5</block></blocks><killingTest>IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>parsePostfix</mutatedMethod><methodDescription>(Ljava/lang/String;)Lintervals/IntervalTree$Node;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>42</index></indexes><blocks><block>7</block></blocks><killingTest>IntervalTreeTest.operatorOnly(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>parsePostfix</mutatedMethod><methodDescription>(Ljava/lang/String;)Lintervals/IntervalTree$Node;</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>120</index></indexes><blocks><block>23</block></blocks><killingTest>IntervalTreeTest.testSingleInterval(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>parsePostfix</mutatedMethod><methodDescription>(Ljava/lang/String;)Lintervals/IntervalTree$Node;</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>125</index></indexes><blocks><block>25</block></blocks><killingTest/><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>parsePostfix</mutatedMethod><methodDescription>(Ljava/lang/String;)Lintervals/IntervalTree$Node;</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><indexes><index>147</index></indexes><blocks><block>31</block></blocks><killingTest>IntervalTreeTest.testSingleInterval(IntervalTreeTest)</killingTest><description>replaced return value with null for intervals/IntervalTree::parsePostfix</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree</mutatedClass><mutatedMethod>textTree</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>262</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>8</index></indexes><blocks><block>1</block></blocks><killingTest>IntervalTreeTest.testSingleInterval(IntervalTreeTest)</killingTest><description>replaced return value with &quot;&quot; for intervals/IntervalTree::textTree</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>&lt;init&gt;</mutatedMethod><methodDescription>(II)V</methodDescription><lineNumber>20</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><indexes><index>9</index></indexes><blocks><block>1</block></blocks><killingTest>IntervalTreeTest.testNoIntersectDetails(IntervalTreeTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>&lt;init&gt;</mutatedMethod><methodDescription>(II)V</methodDescription><lineNumber>20</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>9</index></indexes><blocks><block>1</block></blocks><killingTest>IntervalTreeTest.testNoIntersectDetails(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>5</index></indexes><blocks><block>0</block></blocks><killingTest>IntervalTreeTest.testEquals(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>15</index></indexes><blocks><block>2</block></blocks><killingTest>IntervalTreeTest.testEquals(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>32</index></indexes><blocks><block>4</block></blocks><killingTest>IntervalTreeTest.testEquals(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>37</index></indexes><blocks><block>5</block></blocks><killingTest>IntervalTreeTest.testEquals(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanFalseReturnValsMutator</mutator><indexes><index>9</index></indexes><blocks><block>1</block></blocks><killingTest>IntervalTreeTest.testEquals(IntervalTreeTest)</killingTest><description>replaced boolean return with false for intervals/Interval::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><indexes><index>19</index></indexes><blocks><block>3</block></blocks><killingTest>IntervalTreeTest.testEquals(IntervalTreeTest)</killingTest><description>replaced boolean return with true for intervals/Interval::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator</mutator><indexes><index>45</index></indexes><blocks><block>8</block></blocks><killingTest>IntervalTreeTest.testEquals(IntervalTreeTest)</killingTest><description>replaced boolean return with true for intervals/Interval::equals</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><indexes><index>18</index></indexes><blocks><block>3</block></blocks><killingTest/><description>replaced int return with 0 for intervals/Interval::hashCode</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>intersect</mutatedMethod><methodDescription>(Lintervals/Interval;)Lintervals/Interval;</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><indexes><index>21</index></indexes><blocks><block>2</block></blocks><killingTest>IntervalTreeTest.testTouching(IntervalTreeTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>intersect</mutatedMethod><methodDescription>(Lintervals/Interval;)Lintervals/Interval;</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>21</index></indexes><blocks><block>2</block></blocks><killingTest>IntervalTreeTest.testNoIntersectDetails(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>intersect</mutatedMethod><methodDescription>(Lintervals/Interval;)Lintervals/Interval;</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><indexes><index>29</index></indexes><blocks><block>4</block></blocks><killingTest>IntervalTreeTest.testNoIntersectDetails(IntervalTreeTest)</killingTest><description>replaced return value with null for intervals/Interval::intersect</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>intersect</mutatedMethod><methodDescription>(Lintervals/Interval;)Lintervals/Interval;</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><indexes><index>38</index></indexes><blocks><block>6</block></blocks><killingTest>IntervalTreeTest.testIntervalMethods(IntervalTreeTest)</killingTest><description>replaced return value with null for intervals/Interval::intersect</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>8</index></indexes><blocks><block>0</block></blocks><killingTest>IntervalTreeTest.testNoIntersectDetails(IntervalTreeTest)</killingTest><description>replaced return value with &quot;&quot; for intervals/Interval::toString</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>intervals.Interval</mutatedClass><mutatedMethod>union</mutatedMethod><methodDescription>(Lintervals/Interval;)Lintervals/Interval;</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><indexes><index>22</index></indexes><blocks><block>3</block></blocks><killingTest>IntervalTreeTest.testIntervalMethods(IntervalTreeTest)</killingTest><description>replaced return value with null for intervals/Interval::union</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$OperatorNode</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><indexes><index>67</index></indexes><blocks><block>17</block></blocks><killingTest>ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)</killingTest><description>Replaced double addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$OperatorNode</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><indexes><index>74</index></indexes><blocks><block>18</block></blocks><killingTest>ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)</killingTest><description>Replaced double subtraction with addition</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$OperatorNode</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><indexes><index>81</index></indexes><blocks><block>19</block></blocks><killingTest>ExpressionTreeTest.testMultiply(ExpressionTreeTest)</killingTest><description>Replaced double multiplication with division</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$OperatorNode</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><indexes><index>102</index></indexes><blocks><block>23</block></blocks><killingTest>ExpressionTreeTest.testDivide(ExpressionTreeTest)</killingTest><description>Replaced double division with multiplication</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$OperatorNode</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>89</index></indexes><blocks><block>20</block></blocks><killingTest>ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$OperatorNode</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><indexes><index>68</index></indexes><blocks><block>17</block></blocks><killingTest>ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)</killingTest><description>replaced double return with 0.0d for expression/ExpressionTree$OperatorNode::evaluate</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$OperatorNode</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><indexes><index>75</index></indexes><blocks><block>18</block></blocks><killingTest>ExpressionTreeTest.testSubtract(ExpressionTreeTest)</killingTest><description>replaced double return with 0.0d for expression/ExpressionTree$OperatorNode::evaluate</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$OperatorNode</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><indexes><index>82</index></indexes><blocks><block>19</block></blocks><killingTest>ExpressionTreeTest.testMultiply(ExpressionTreeTest)</killingTest><description>replaced double return with 0.0d for expression/ExpressionTree$OperatorNode::evaluate</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$OperatorNode</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><indexes><index>103</index></indexes><blocks><block>23</block></blocks><killingTest>ExpressionTreeTest.testDivide(ExpressionTreeTest)</killingTest><description>replaced double return with 0.0d for expression/ExpressionTree$OperatorNode::evaluate</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$OperatorNode</mutatedClass><mutatedMethod>infix</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>12</index></indexes><blocks><block>2</block></blocks><killingTest>ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)</killingTest><description>replaced return value with &quot;&quot; for expression/ExpressionTree$OperatorNode::infix</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$OperatorNode</mutatedClass><mutatedMethod>schemeExpression</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>12</index></indexes><blocks><block>2</block></blocks><killingTest>ExpressionTreeTest.testMultiply(ExpressionTreeTest)</killingTest><description>replaced return value with &quot;&quot; for expression/ExpressionTree$OperatorNode::schemeExpression</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$OperatorNode</mutatedClass><mutatedMethod>textTree</mutatedMethod><methodDescription>(Ljava/lang/String;Z)Ljava/lang/String;</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>60</index></indexes><blocks><block>12</block></blocks><killingTest>ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$OperatorNode</mutatedClass><mutatedMethod>textTree</mutatedMethod><methodDescription>(Ljava/lang/String;Z)Ljava/lang/String;</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>99</index></indexes><blocks><block>22</block></blocks><killingTest>ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)</killingTest><description>replaced return value with &quot;&quot; for expression/ExpressionTree$OperatorNode::textTree</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree$OperatorNode</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>()Lintervals/Interval;</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><indexes><index>50</index></indexes><blocks><block>12</block></blocks><killingTest>IntervalTreeTest.testWhitespace(IntervalTreeTest)</killingTest><description>replaced return value with null for intervals/IntervalTree$OperatorNode::evaluate</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree$OperatorNode</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>()Lintervals/Interval;</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><indexes><index>57</index></indexes><blocks><block>14</block></blocks><killingTest>IntervalTreeTest.testNoOverlap(IntervalTreeTest)</killingTest><description>replaced return value with null for intervals/IntervalTree$OperatorNode::evaluate</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree$OperatorNode</mutatedClass><mutatedMethod>getHeight</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><indexes><index>11</index></indexes><blocks><block>3</block></blocks><killingTest/><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree$OperatorNode</mutatedClass><mutatedMethod>getHeight</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><indexes><index>12</index></indexes><blocks><block>3</block></blocks><killingTest/><description>replaced int return with 0 for intervals/IntervalTree$OperatorNode::getHeight</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree$OperatorNode</mutatedClass><mutatedMethod>textTree</mutatedMethod><methodDescription>(Ljava/lang/String;Z)Ljava/lang/String;</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><indexes><index>60</index></indexes><blocks><block>12</block></blocks><killingTest>IntervalTreeTest.testTreeOutput(IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree$OperatorNode</mutatedClass><mutatedMethod>textTree</mutatedMethod><methodDescription>(Ljava/lang/String;Z)Ljava/lang/String;</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>103</index></indexes><blocks><block>22</block></blocks><killingTest>IntervalTreeTest.testTreeOutput(IntervalTreeTest)</killingTest><description>replaced return value with &quot;&quot; for intervals/IntervalTree$OperatorNode::textTree</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$NumberNode</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>34</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><indexes><index>5</index></indexes><blocks><block>0</block></blocks><killingTest>ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)</killingTest><description>replaced double return with 0.0d for expression/ExpressionTree$NumberNode::evaluate</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$NumberNode</mutatedClass><mutatedMethod>infix</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>6</index></indexes><blocks><block>1</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>replaced return value with &quot;&quot; for expression/ExpressionTree$NumberNode::infix</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$NumberNode</mutatedClass><mutatedMethod>schemeExpression</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>6</index></indexes><blocks><block>1</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>replaced return value with &quot;&quot; for expression/ExpressionTree$NumberNode::schemeExpression</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExpressionTree.java</sourceFile><mutatedClass>expression.ExpressionTree$NumberNode</mutatedClass><mutatedMethod>textTree</mutatedMethod><methodDescription>(Ljava/lang/String;Z)Ljava/lang/String;</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>6</index></indexes><blocks><block>1</block></blocks><killingTest>ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)</killingTest><description>replaced return value with &quot;&quot; for expression/ExpressionTree$NumberNode::textTree</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree$IntervalNode</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>()Lintervals/Interval;</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator</mutator><indexes><index>5</index></indexes><blocks><block>0</block></blocks><killingTest>IntervalTreeTest.testSingleInterval(IntervalTreeTest)</killingTest><description>replaced return value with null for intervals/IntervalTree$IntervalNode::evaluate</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree$IntervalNode</mutatedClass><mutatedMethod>getHeight</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator</mutator><indexes><index>4</index></indexes><blocks><block>0</block></blocks><killingTest/><description>replaced int return with 0 for intervals/IntervalTree$IntervalNode::getHeight</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>intervals.IntervalTree$IntervalNode</mutatedClass><mutatedMethod>textTree</mutatedMethod><methodDescription>(Ljava/lang/String;Z)Ljava/lang/String;</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator</mutator><indexes><index>6</index></indexes><blocks><block>1</block></blocks><killingTest>IntervalTreeTest.testSingleInterval(IntervalTreeTest)</killingTest><description>replaced return value with &quot;&quot; for intervals/IntervalTree$IntervalNode::textTree</description></mutation>
</mutations>
