<?xml version="1.0" encoding="UTF-8"?>
<coverage>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='4'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='5'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='2'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='3'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='0'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='1'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='20'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='&lt;init&gt;(D)V' number='1'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='21'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='18'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='19'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='&lt;init&gt;(D)V' number='0'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='16'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$Node' method='&lt;init&gt;()V' number='0'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='17'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$Node' method='&lt;init&gt;()V' number='1'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='15'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='1'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.emptyString(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justSpaces(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.nullInput(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='0'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.emptyString(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justSpaces(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.nullInput(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='3'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.emptyString(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justSpaces(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='2'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.emptyString(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justSpaces(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='4'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.emptyString(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justSpaces(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='7'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='0'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='1'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='2'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='3'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='4'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='5'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='6'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='7'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='8'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='9'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='10'><tests>
<test name='ExpressionTreeTest.badToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.unknownOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='&lt;init&gt;(Ljava/lang/String;Lexpression/ExpressionTree$Node;Lexpression/ExpressionTree$Node;)V' number='0'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='&lt;init&gt;(Ljava/lang/String;Lexpression/ExpressionTree$Node;Lexpression/ExpressionTree$Node;)V' number='1'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='12'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='13'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='10'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='11'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='8'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='9'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='6'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='7'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='14'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='28'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='29'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='27'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='24'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='25'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='22'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='23'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='8'><tests>
<test name='ExpressionTreeTest.checkErrorMessages(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.notEnoughOperands2(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.operatorsOnly(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.tooManyNumbers(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='22'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='21'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='evaluate()D' number='0'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='20'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='16'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='15'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='14'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='13'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='evaluate()D' number='0'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='3'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='2'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='1'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='0'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='9'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='30'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='31'><tests>
<test name='ExpressionTreeTest.divByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='9'><tests>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='8'><tests>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='7'><tests>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='18'><tests>
<test name='ExpressionTreeTest.divByZeroIndirect(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='5'><tests>
<test name='ExpressionTreeTest.emptyString(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justSpaces(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.nullInput(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='6'><tests>
<test name='ExpressionTreeTest.emptyString(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.justSpaces(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.nullInput(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='textTree()Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='evaluate()D' number='1'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='textTree()Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='6'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='5'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='17'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='schemeExpression()Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='fmt(D)Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='4'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSpacesAndTabs(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWithZero(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='schemeExpression()Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='fmt(D)Ljava/lang/String;' number='3'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='fmt(D)Ljava/lang/String;' number='2'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='fmt(D)Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='fmt(D)Ljava/lang/String;' number='8'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='fmt(D)Ljava/lang/String;' number='7'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='fmt(D)Ljava/lang/String;' number='6'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='fmt(D)Ljava/lang/String;' number='10'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='fmt(D)Ljava/lang/String;' number='9'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='infix()Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='infix()Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='schemeExpression()Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='schemeExpression()Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='schemeExpression()Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='schemeExpression()Ljava/lang/String;' number='2'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='schemeExpression()Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='infix()Ljava/lang/String;' number='2'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='infix()Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='infix()Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='infix()Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='infix()Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSubtract(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='22'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='21'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='20'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='19'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='14'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='13'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='12'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='11'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='18'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='17'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='16'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='15'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='6'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='5'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='4'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='3'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='10'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='9'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='8'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='7'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormat(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleValue(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='2'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testAddTwoNumbers(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTreeVisualization(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='23'><tests>
<test name='ExpressionTreeTest.testComplexNesting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivide(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='fmt(D)Ljava/lang/String;' number='12'><tests>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='fmt(D)Ljava/lang/String;' number='11'><tests>
<test name='ExpressionTreeTest.testDecimalFormat(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='12'><tests>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='11'><tests>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='10'><tests>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='19'><tests>
<test name='ExpressionTreeTest.testMultiply(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNestedOps(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='20'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='19'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='&lt;init&gt;(II)V' number='3'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalValidation(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='18'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='&lt;init&gt;(II)V' number='1'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEquals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testHashCode(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalMethods(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalValidation(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersectDetails(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testUnionLogic(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='&lt;init&gt;(II)V' number='2'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalValidation(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='&lt;init&gt;(II)V' number='0'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEquals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testHashCode(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalMethods(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalValidation(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersectDetails(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testUnionLogic(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='13'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='20'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='12'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='19'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='11'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='10'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='15'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='15'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='14'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='7'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='8'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='0'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyTest(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.nullTest(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.spacesOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyStringVariations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='1'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyTest(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.nullTest(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.spacesOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyStringVariations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='2'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyTest(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.spacesOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyStringVariations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='3'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyTest(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.spacesOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyStringVariations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='4'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyTest(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.spacesOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyStringVariations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='5'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='isOperator(Ljava/lang/String;)Z' number='6'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='4'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='isOperator(Ljava/lang/String;)Z' number='5'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='isOperator(Ljava/lang/String;)Z' number='3'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='9'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='isOperator(Ljava/lang/String;)Z' number='2'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='8'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='isOperator(Ljava/lang/String;)Z' number='1'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='isOperator(Ljava/lang/String;)Z' number='0'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='5'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='4'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='3'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='2'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='1'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='1'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='0'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='0'><tests>
<test name='IntervalTreeTest.badOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='3'><tests>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='2'><tests>
<test name='IntervalTreeTest.dashNotComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.missingComma(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='23'><tests>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='22'><tests>
<test name='IntervalTreeTest.decimalsNotAllowed(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notNumbers(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='17'><tests>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='16'><tests>
<test name='IntervalTreeTest.emptyStart(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='5'><tests>
<test name='IntervalTreeTest.emptyTest(IntervalTreeTest)'/>
<test name='IntervalTreeTest.nullTest(IntervalTreeTest)'/>
<test name='IntervalTreeTest.spacesOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyStringVariations(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='6'><tests>
<test name='IntervalTreeTest.emptyTest(IntervalTreeTest)'/>
<test name='IntervalTreeTest.nullTest(IntervalTreeTest)'/>
<test name='IntervalTreeTest.spacesOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyStringVariations(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='&lt;init&gt;(II)V' number='4'><tests>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEquals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testHashCode(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalMethods(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalValidation(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersectDetails(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testUnionLogic(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='21'><tests>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='18'><tests>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='17'><tests>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='16'><tests>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$IntervalNode' method='&lt;init&gt;(Lintervals/Interval;)V' number='1'><tests>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='9'><tests>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='8'><tests>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='7'><tests>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='6'><tests>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$IntervalNode' method='&lt;init&gt;(Lintervals/Interval;)V' number='0'><tests>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='21'><tests>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$Node' method='&lt;init&gt;()V' number='1'><tests>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$Node' method='&lt;init&gt;()V' number='0'><tests>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.wrongOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='isOperator(Ljava/lang/String;)Z' number='4'><tests>
<test name='IntervalTreeTest.notEnoughArgs(IntervalTreeTest)'/>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.operatorOnly(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='14'><tests>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='13'><tests>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='12'><tests>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='11'><tests>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='10'><tests>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='&lt;init&gt;(Ljava/lang/String;Lintervals/IntervalTree$Node;Lintervals/IntervalTree$Node;)V' number='1'><tests>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='&lt;init&gt;(Ljava/lang/String;Lintervals/IntervalTree$Node;Lintervals/IntervalTree$Node;)V' number='0'><tests>
<test name='IntervalTreeTest.notEnoughArgs2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='7'><tests>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='6'><tests>
<test name='IntervalTreeTest.testBadCommaFormat(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='1'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='0'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='3'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='2'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='23'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='22'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='31'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='30'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$IntervalNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='0'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$IntervalNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='1'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='0'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEquals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='5'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEquals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='4'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEquals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='2'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEquals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='8'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEquals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='6'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEquals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='evaluate()Lintervals/Interval;' number='1'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='21'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='20'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='evaluate()Lintervals/Interval;' number='0'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='22'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='17'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='16'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='19'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='18'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='13'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='12'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='15'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='14'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='9'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='8'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='11'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='10'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='5'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='4'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='7'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='6'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='intersect(Lintervals/Interval;)Lintervals/Interval;' number='6'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalMethods(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='2'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='intersect(Lintervals/Interval;)Lintervals/Interval;' number='2'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalMethods(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersectDetails(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='1'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='9'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='intersect(Lintervals/Interval;)Lintervals/Interval;' number='5'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalMethods(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='3'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='intersect(Lintervals/Interval;)Lintervals/Interval;' number='1'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalMethods(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersectDetails(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='0'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='intersect(Lintervals/Interval;)Lintervals/Interval;' number='0'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalMethods(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersectDetails(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='14'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='13'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='10'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='9'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='8'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='7'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='textTree()Ljava/lang/String;' number='0'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='textTree()Ljava/lang/String;' number='1'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='toString()Ljava/lang/String;' number='0'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalMethods(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalValidation(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersectDetails(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTreeOutput(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testUnionLogic(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$IntervalNode' method='evaluate()Lintervals/Interval;' number='0'><tests>
<test name='IntervalTreeTest.testBasicIntersect(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='union(Lintervals/Interval;)Lintervals/Interval;' number='0'><tests>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalMethods(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testUnionLogic(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='union(Lintervals/Interval;)Lintervals/Interval;' number='1'><tests>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalMethods(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testUnionLogic(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='union(Lintervals/Interval;)Lintervals/Interval;' number='2'><tests>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalMethods(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testUnionLogic(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='union(Lintervals/Interval;)Lintervals/Interval;' number='3'><tests>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalMethods(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testUnionLogic(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='4'><tests>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='12'><tests>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='11'><tests>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='6'><tests>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='5'><tests>
<test name='IntervalTreeTest.testBasicUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testChaining(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexOps(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeNumbers(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOperatorBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testPointInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouching(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespace(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='intersect(Lintervals/Interval;)Lintervals/Interval;' number='3'><tests>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersectDetails(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='intersect(Lintervals/Interval;)Lintervals/Interval;' number='4'><tests>
<test name='IntervalTreeTest.testEmptyIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersectDetails(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoOverlap(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='1'><tests>
<test name='IntervalTreeTest.testEquals(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='3'><tests>
<test name='IntervalTreeTest.testEquals(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='7'><tests>
<test name='IntervalTreeTest.testEquals(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='hashCode()I' number='1'><tests>
<test name='IntervalTreeTest.testHashCode(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='hashCode()I' number='2'><tests>
<test name='IntervalTreeTest.testHashCode(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='hashCode()I' number='3'><tests>
<test name='IntervalTreeTest.testHashCode(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='hashCode()I' number='0'><tests>
<test name='IntervalTreeTest.testHashCode(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='29'><tests>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='28'><tests>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='25'><tests>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='24'><tests>
<test name='IntervalTreeTest.tooManyArgs(IntervalTreeTest)'/>
</tests>
</block>
</coverage>
