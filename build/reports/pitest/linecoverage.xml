<?xml version="1.0" encoding="UTF-8"?>
<coverage>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='12'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='11'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='evaluate()D' number='1'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='10'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='evaluate()D' number='0'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='6'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='5'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='19'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='17'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='16'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='1'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testEmptyExpression(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNullExpression(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceOnlyExpression(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='0'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testEmptyExpression(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNullExpression(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceOnlyExpression(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='evaluate()D' number='0'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='3'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testEmptyExpression(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceOnlyExpression(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='2'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testEmptyExpression(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceOnlyExpression(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='schemeExpression()Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='4'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testEmptyExpression(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceOnlyExpression(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='7'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='4'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='3'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='2'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='schemeExpression()Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='1'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='0'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='&lt;init&gt;(Ljava/lang/String;Lexpression/ExpressionTree$Node;Lexpression/ExpressionTree$Node;)V' number='0'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='&lt;init&gt;(Ljava/lang/String;Lexpression/ExpressionTree$Node;Lexpression/ExpressionTree$Node;)V' number='1'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='9'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='8'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='infix()Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='infix()Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='4'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='5'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='2'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='3'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='0'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='1'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='12'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='schemeExpression()Ljava/lang/String;' number='3'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='13'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='schemeExpression()Ljava/lang/String;' number='2'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='10'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='schemeExpression()Ljava/lang/String;' number='5'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='infix()Ljava/lang/String;' number='2'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='schemeExpression()Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='11'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='schemeExpression()Ljava/lang/String;' number='4'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='infix()Ljava/lang/String;' number='4'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='infix()Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='infix()Ljava/lang/String;' number='3'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='infix()Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='6'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='infix()Ljava/lang/String;' number='6'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='schemeExpression()Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='7'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='infix()Ljava/lang/String;' number='5'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='schemeExpression()Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='&lt;init&gt;(D)V' number='1'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='infix()Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='21'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='18'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='infix()Ljava/lang/String;' number='2'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='&lt;init&gt;(D)V' number='0'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='infix()Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='16'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$Node' method='&lt;init&gt;()V' number='0'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='schemeExpression()Ljava/lang/String;' number='2'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='17'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='schemeExpression()Ljava/lang/String;' number='6'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$Node' method='&lt;init&gt;()V' number='1'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='schemeExpression()Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='14'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='15'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='22'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='23'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='30'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='31'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='0'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='1'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='2'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='3'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='4'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='5'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='6'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='7'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='8'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='9'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='isOperator(Ljava/lang/String;)Z' number='10'><tests>
<test name='ExpressionTreeTest.testComplexExpression1(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNegativeAndZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testScientificNotation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleMultiplication(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceHandling(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='23'><tests>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='9'><tests>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='8'><tests>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='7'><tests>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='20'><tests>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='18'><tests>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleSubtraction(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='15'><tests>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='14'><tests>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='13'><tests>
<test name='ExpressionTreeTest.testComplexExpression4(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleDivision(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='textTree()Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='textTree()Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='22'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='21'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='20'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='19'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='14'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='13'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='12'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='11'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='18'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='17'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='16'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='15'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='6'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='5'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='4'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='3'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='10'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='9'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='8'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='7'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='3'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='2'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='2'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='6'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='1'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='5'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='0'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='4'><tests>
<test name='ExpressionTreeTest.testComplexTextTree(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testIntegerFormatting(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSimpleAddition(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testSingleNumber(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='22'><tests>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$OperatorNode' method='evaluate()D' number='21'><tests>
<test name='ExpressionTreeTest.testDivisionByZero(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testDivisionByZeroComplex(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='5'><tests>
<test name='ExpressionTreeTest.testEmptyExpression(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNullExpression(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceOnlyExpression(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='6'><tests>
<test name='ExpressionTreeTest.testEmptyExpression(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testNullExpression(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testWhitespaceOnlyExpression(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='infix()Ljava/lang/String;' number='8'><tests>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='infix()Ljava/lang/String;' number='7'><tests>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='schemeExpression()Ljava/lang/String;' number='7'><tests>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='schemeExpression()Ljava/lang/String;' number='8'><tests>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='8'><tests>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree$NumberNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='7'><tests>
<test name='ExpressionTreeTest.testFloatFormatting(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='20'><tests>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='19'><tests>
<test name='ExpressionTreeTest.testInvalidOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testInvalidToken(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='8'><tests>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='9'><tests>
<test name='ExpressionTreeTest.testMultipleOperatorsNoOperands(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testOnlyOperator(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsComplex(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooFewOperandsForOperator(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='28'><tests>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='29'><tests>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='24'><tests>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='expression.ExpressionTree' method='parsePostfix(Ljava/lang/String;)Lexpression/ExpressionTree$Node;' number='25'><tests>
<test name='ExpressionTreeTest.testStackSizeValidation(ExpressionTreeTest)'/>
<test name='ExpressionTreeTest.testTooManyOperands(ExpressionTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='&lt;init&gt;(II)V' number='4'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEqualsExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testExactComparisonOperators(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testHashCodeConsistency(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalIntersectionCondition(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalUnionMathOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMathMinMaxMutations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='&lt;init&gt;(II)V' number='1'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEqualsExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testExactComparisonOperators(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testHashCodeConsistency(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalIntersectionCondition(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalUnionMathOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMathMinMaxMutations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='23'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='22'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='&lt;init&gt;(II)V' number='0'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEqualsExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testExactComparisonOperators(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testHashCodeConsistency(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalIntersectionCondition(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalUnionMathOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMathMinMaxMutations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='21'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='18'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='17'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='16'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='15'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='14'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='31'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='30'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='7'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='2'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='8'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='intersect(Lintervals/Interval;)Lintervals/Interval;' number='2'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalIntersectionCondition(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMathMinMaxMutations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='1'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='9'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='intersect(Lintervals/Interval;)Lintervals/Interval;' number='5'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalIntersectionCondition(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMathMinMaxMutations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='4'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='intersect(Lintervals/Interval;)Lintervals/Interval;' number='4'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalIntersectionCondition(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMathMinMaxMutations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='3'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$IntervalNode' method='&lt;init&gt;(Lintervals/Interval;)V' number='1'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='intersect(Lintervals/Interval;)Lintervals/Interval;' number='1'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalIntersectionCondition(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMathMinMaxMutations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='0'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='intersect(Lintervals/Interval;)Lintervals/Interval;' number='0'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalIntersectionCondition(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMathMinMaxMutations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='0'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalTreeEmptyChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNullExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceOnlyExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='1'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalTreeEmptyChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNullExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceOnlyExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='2'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalTreeEmptyChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceOnlyExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='3'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalTreeEmptyChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceOnlyExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='4'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEmptyExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalTreeEmptyChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceOnlyExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='13'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='5'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='12'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='4'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='11'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='10'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='9'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='14'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='8'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='13'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='7'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='6'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='5'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='10'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='4'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='9'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='3'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='union(Lintervals/Interval;)Lintervals/Interval;' number='0'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalUnionMathOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMathMinMaxMutations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$IntervalNode' method='&lt;init&gt;(Lintervals/Interval;)V' number='0'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='12'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='2'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='union(Lintervals/Interval;)Lintervals/Interval;' number='1'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalUnionMathOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMathMinMaxMutations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='11'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='1'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='1'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='union(Lintervals/Interval;)Lintervals/Interval;' number='2'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalUnionMathOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMathMinMaxMutations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='6'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='0'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='0'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='union(Lintervals/Interval;)Lintervals/Interval;' number='3'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalUnionMathOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMathMinMaxMutations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='5'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='8'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='evaluate()Lintervals/Interval;' number='7'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='21'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='20'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='19'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='18'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='13'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='&lt;init&gt;(Ljava/lang/String;Lintervals/IntervalTree$Node;Lintervals/IntervalTree$Node;)V' number='1'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='12'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='11'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='10'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='15'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='14'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='0'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEqualsExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='&lt;init&gt;(Ljava/lang/String;Lintervals/IntervalTree$Node;Lintervals/IntervalTree$Node;)V' number='0'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='5'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEqualsExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='4'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEqualsExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='2'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEqualsExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='8'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEqualsExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='6'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testEqualsExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$Node' method='&lt;init&gt;()V' number='1'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$Node' method='&lt;init&gt;()V' number='0'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='evaluate()Lintervals/Interval;' number='1'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='evaluate()Lintervals/Interval;' number='0'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='isOperator(Ljava/lang/String;)Z' number='6'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='isOperator(Ljava/lang/String;)Z' number='5'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='isOperator(Ljava/lang/String;)Z' number='4'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='isOperator(Ljava/lang/String;)Z' number='3'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='isOperator(Ljava/lang/String;)Z' number='2'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='isOperator(Ljava/lang/String;)Z' number='1'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='isOperator(Ljava/lang/String;)Z' number='0'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$IntervalNode' method='evaluate()Lintervals/Interval;' number='0'><tests>
<test name='IntervalTreeTest.testChainedOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testComplexExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNegativeIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTouchingIntervals(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testZeroLengthInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='1'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='0'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='3'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='2'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$IntervalNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='0'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$IntervalNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='1'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='textTree()Ljava/lang/String;' number='0'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='textTree()Ljava/lang/String;' number='1'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='21'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='20'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='22'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='toString()Ljava/lang/String;' number='0'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testExactComparisonOperators(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalIntersectionCondition(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalOperatorExactBehavior(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalUnionMathOperations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMathMinMaxMutations(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSingleInterval(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='17'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='16'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='19'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='18'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='13'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='12'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='15'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='14'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='9'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='8'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='11'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='10'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='5'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='4'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='7'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree$OperatorNode' method='textTree(Ljava/lang/String;Z)Ljava/lang/String;' number='6'><tests>
<test name='IntervalTreeTest.testComplexTextTree(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleIntersection(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testSimpleUnion(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='5'><tests>
<test name='IntervalTreeTest.testEmptyExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalTreeEmptyChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNullExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceOnlyExpression(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='&lt;init&gt;(Ljava/lang/String;)V' number='6'><tests>
<test name='IntervalTreeTest.testEmptyExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testIntervalTreeEmptyChecks(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNullExpression(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testWhitespaceOnlyExpression(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='1'><tests>
<test name='IntervalTreeTest.testEqualsExactBehavior(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='3'><tests>
<test name='IntervalTreeTest.testEqualsExactBehavior(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='equals(Ljava/lang/Object;)Z' number='7'><tests>
<test name='IntervalTreeTest.testEqualsExactBehavior(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='&lt;init&gt;(II)V' number='3'><tests>
<test name='IntervalTreeTest.testExactComparisonOperators(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='&lt;init&gt;(II)V' number='2'><tests>
<test name='IntervalTreeTest.testExactComparisonOperators(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='hashCode()I' number='1'><tests>
<test name='IntervalTreeTest.testHashCodeConsistency(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='hashCode()I' number='2'><tests>
<test name='IntervalTreeTest.testHashCodeConsistency(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='hashCode()I' number='3'><tests>
<test name='IntervalTreeTest.testHashCodeConsistency(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='hashCode()I' number='0'><tests>
<test name='IntervalTreeTest.testHashCodeConsistency(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.Interval' method='intersect(Lintervals/Interval;)Lintervals/Interval;' number='3'><tests>
<test name='IntervalTreeTest.testIntervalIntersectionCondition(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testMinValueHandling(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testNoIntersection(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='20'><tests>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='19'><tests>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalOrder(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='3'><tests>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='2'><tests>
<test name='IntervalTreeTest.testInvalidIntervalFormat1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalFormat2(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='17'><tests>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='16'><tests>
<test name='IntervalTreeTest.testInvalidIntervalFormat3(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='23'><tests>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='22'><tests>
<test name='IntervalTreeTest.testInvalidIntervalValues1(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testInvalidIntervalValues2(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='9'><tests>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='8'><tests>
<test name='IntervalTreeTest.testOnlyOperator(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsComplex(IntervalTreeTest)'/>
<test name='IntervalTreeTest.testTooFewOperandsForOperator(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='7'><tests>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parseInterval(Ljava/lang/String;)Lintervals/Interval;' number='6'><tests>
<test name='IntervalTreeTest.testParseIntervalCommaChecks(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='29'><tests>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='28'><tests>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='25'><tests>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
</tests>
</block>
<block classname='intervals.IntervalTree' method='parsePostfix(Ljava/lang/String;)Lintervals/IntervalTree$Node;' number='24'><tests>
<test name='IntervalTreeTest.testTooManyOperands(IntervalTreeTest)'/>
</tests>
</block>
</coverage>
